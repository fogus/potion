{"version":1,"ops":[{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1426589081,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgyMjY2NzQ3","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-82266747"},"message":"As you found out on stackoverflow, `size` needs to be `length`, as in ruby. A call on nil segfaults unfortunately. \nA method on nil just silently fails as you also found out in #79.\n\nhttps://stackoverflow.com/questions/29091475/printing-odd-prime-every-100k-primes-found/29096987#29096987","files":null},{"type":2,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1426589189,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjU2Njk2MDM3"},"title":"call on nil segfaults","was":"call on nil segfaults"},{"type":3,"author":{"id":"6c4ce90c60e1731e26a10063255a855b265dc6e4"},"timestamp":1438689507,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDEyNzU3Njk5Ng==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-127576996"},"message":"Related to this most probably, the comparison operators also segfault on nil. You can see this by running example/palindrome.pn with no arguments. With the -B switch it completes successfully, but segfaults under the jit.","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1444739590,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0NzcwMTgwMA==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-147701800"},"message":"The question is if we should slow down jit by checking argument types or not.\nSo far I check with a debugging potion, and not without.","files":null},{"type":3,"author":{"id":"6c4ce90c60e1731e26a10063255a855b265dc6e4"},"timestamp":1445010264,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0ODc1MDc1Nw==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-148750757"},"message":"I don't think it's necessary to type check arguments.\n\nThe problem is in potion_x86_call, where it doesn't check for nil before attempting to dereference memory. I think this needs to be added to the beginning of the function, otherwise it attempts to call potion_obj_get_call which returns nil, which is then attempted to be deferenced as a memory location.\n\nAlternatively, the necessary code could be added just after the lines (in vm-x86.c)\n\n``` c\n      //[b]: got the method, call it (first special slot from PNClosure)\n      TAG_LABEL(tag_b);\n```\n\nThe memory deference for nil is in the line immediately following this.\n\nI'm not sure where the best place is to put it, nor do I have the necessary ASM skills to do the modification myself.","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1445010359,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0ODc1MTExMg==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-148751112"},"message":"\u003e On Oct 16, 2015, at 5:44 PM, Peter Arthur notifications@github.com wrote:\n\u003e \n\u003e I don't think it's necessary to type check arguments.\n\u003e \n\u003e The problem is in potion_x86_call, where it doesn't check for nil before attempting to dereference memory. I think this needs to be added to the beginning of the function, otherwise it attempts to call potion_obj_get_call which returns nil, which is then attempted to be deferenced as a memory location.\n\u003e \n\u003e Alternatively, the necessary code could be added just after the lines (in vm-x86.c)\n\u003e \n\u003e ```\n\u003e   //[b]: got the method, call it (first special slot from PNClosure)\n\u003e ```\n\u003e \n\u003e TAG_LABEL(tag_b);\n\u003e The memory deference for nil is in the line immediately following this.\n\nGood idea. That would be only 2 lines.\n\n\u003e I'm not sure where the best place is to put it, nor do I have the necessary ASM skills to do the modification myself.\n\nIâ€™ll try when I have a bit more time.","files":null},{"type":3,"author":{"id":"6c4ce90c60e1731e26a10063255a855b265dc6e4"},"timestamp":1445031133,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0ODg0MTUxOA==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-148841518"},"message":"Hi @rurban \n\nI've dug a bit deeper into this. This particular issue is caused by potion_object_size, which attempts to return the size of the object.\n\nUnfortunately, there are a few problems with this function.\n1. The number returned is a raw number, and needs to be wrapped in PN_NUM() macro in order for it to return the correct value to the caller.\n2. The function is not GC aware, which means that if it gets passed a FWD struct, it will fail horribly.\n3. The function does not consider non-pointer objects, such as PN_TRUE, PN_FALSE and PN_NUM.\n\nI can confirm that the original code does not segfault when the line\n\n``` c\npotion_method(obj_vt, \"size\", potion_object_size, 0);\n```\n\nis commented out, indicating this is the problem.\n\nChanging the vm call function would not fix this problem, although it wouldn't hurt to still make those changes. In fact, I think the current code correctly handles null\n\nI really don't think this function is that useful and personally I would remove it unless we can find a reason to keep it. It can quite easily be confused with the length method, as we have already seen.","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1445070692,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE0ODg5NTY4Nw==","github-url":"https://github.com/perl11/potion/issues/78#issuecomment-148895687"},"message":"Just fixed it, thanks. \nlength vs size methods: \n- length is defined for tuples, tables, str and bytes, returning the number of elements\n- size is defined of all objects and now also for all primitives, returning the number of used bytes for the members and fields, but not for variable length data, like str, bytes.\n\nsize is a bit ill-defined and currently not used, yes. But I'll keep it asis for now","files":null},{"type":4,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1445070692,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NDM4MTcxMzIy"},"status":2}]}