{"version":1,"ops":[{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1379346484,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI0NTIwMzU2","github-url":"https://github.com/perl11/potion/issues/9#issuecomment-24520356"},"message":"I tried to save and restore the overwritten P fields. parse should be re-entrant. \n  source, yypos, input. skip pbuf\n\nBut it turned out the problem is that PNSource in the parser is not GC safe. all the intermediate t and lhs objects \nneed to be moved also, and be checked for FWDs.","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1379352801,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI0NTI4NTEw","github-url":"https://github.com/perl11/potion/issues/9#issuecomment-24528510"},"message":"re-entrancy and testcase fixed with \n\ncommit d83d86947e44bff8a3eec37c203ac8f5cf471975\nAuthor: Reini Urban rurban@cpanel.net\nDate:   Mon Sep 16 12:32:35 2013 -0500\n\n```\npotion #9: fix parser is not re-entrant, but still not GC safe\n\nAll the intermediate t and lhs objects in the compiler need to\nbe moved also while in a eval, and be checked for FWDs.\n```","files":null},{"type":3,"author":{"id":"6c4ce90c60e1731e26a10063255a855b265dc6e4"},"timestamp":1549398646,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ2MDc5MTg3NQ==","github-url":"https://github.com/perl11/potion/issues/9#issuecomment-460791875"},"message":"I had some luck with trying to make the parser GC safe. I can't guarantee that this is the right solution, but it seems to work for me.\n\n```\nvoid potion_gc_minor_parser(PN parser) {\n  if(parser == 0)\n    return;\n\n  struct _GREG *G = (struct _GREG *)parser;\n  struct PNMemory *M = ((Potion *)G-\u003edata)-\u003emem;\n  Potion *P = G-\u003edata;\n\n  if(PN_IS_PTR(G-\u003ess)) {\n    GC_MINOR_UPDATE(G-\u003ess);\n    potion_mark_minor(G-\u003edata, (const struct PNObject *) G-\u003ess);\n  }\n  if(PN_IS_PTR(G-\u003eval[0])) {\n    GC_MINOR_UPDATE(G-\u003eval[0]);\n    potion_mark_minor(G-\u003edata, (const struct PNObject *) G-\u003eval[0]);\n  }\n  int c = G-\u003eval - G-\u003evals;\n  for(int i = 0; i \u003c c; i++) {\n    if(PN_IS_PTR(G-\u003evals[i])) {\n      GC_MINOR_UPDATE(G-\u003evals[i]);\n      potion_mark_minor(G-\u003edata, (const struct PNObject *) G-\u003evals[i]);\n    }\n  }\n}\n\nvoid potion_gc_major_parser(PN parser) {\n  if(parser == 0)\n    return;\n\n  struct _GREG *G = (struct _GREG *)parser;\n  struct PNMemory *M = ((Potion *)G-\u003edata)-\u003emem;\n  Potion *P = G-\u003edata;\n\n  if(PN_IS_PTR(G-\u003ess)) {\n    GC_MAJOR_UPDATE(G-\u003ess);\n    potion_mark_major(P, (const struct PNObject *) G-\u003ess);\n  }\n  if(PN_IS_PTR(G-\u003eval[0])) {\n    GC_MAJOR_UPDATE(G-\u003eval[0]);\n    potion_mark_major(P, (const struct PNObject *) G-\u003eval[0]);\n  }\n  int c = G-\u003eval - G-\u003evals;\n  for(int i = 0; i \u003c c; i++) {\n    if(G-\u003evals[i] != NULL \u0026\u0026 PN_IS_PTR(G-\u003evals[i])) {\n      GC_MAJOR_UPDATE(G-\u003evals[i]);\n      potion_mark_major(P, (const struct PNObject *) G-\u003evals[i]);\n    }\n  }\n}\n```\n\nI made the calls right after the GC calls to the strings (for both major and minor GC)\n\n```\n    GC_MAJOR_STRINGS();\n    potion_gc_major_parser(P-\u003eparser); // ensure the parser is GC safe\n```\n\nSorry I don't have time to make a proper pull request, as my copy of potion has diverged from this repository, as well as a lack of time. I think this should help with making the parser a bit safer though.","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1549407643,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ2MDgzODYwNQ==","github-url":"https://github.com/perl11/potion/issues/9#issuecomment-460838605"},"message":"Great, I'll look at it","files":null}]}