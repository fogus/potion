{"version":1,"ops":[{"type":3,"author":{"id":"e862acab78923d0333af14df3ccee9c7e14880e7"},"timestamp":1320801067,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2NzYyNDQ=","github-url":"https://github.com/perl11/potion/issues/14#issuecomment-2676244"},"message":"This is one of many subtle issues with this program. You are not missing something.\n\nThanks for reporting, and feel free to fix it :).","files":null},{"type":3,"author":{"id":"dc8a501266912e06a2fdd3f9cafe05d1338b8aad"},"timestamp":1380921888,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1NzMxMTg2","github-url":"https://github.com/perl11/potion/issues/14#issuecomment-25731186"},"message":"The current workaround is to use parens for the `to` method call:\n\n```\nn = 5, 3 to (n, (i): i string print.) # =\u003e 345\n```\n\nI'll try to fix this special case in the compiler, so that the parens are optional.","files":null},{"type":3,"author":{"id":"6c4ce90c60e1731e26a10063255a855b265dc6e4"},"timestamp":1447925518,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1ODAwMjM3NA==","github-url":"https://github.com/perl11/potion/issues/14#issuecomment-158002374"},"message":"The following seems to work as well:\n\n```\nn = 5, 3 to (n) (i): i string print. # =\u003e 345\n\n```\n\nThe issue is that literal values are treated differently than names, which could be a variable or another method call.\n\nFor instance in the code\n\n```\nup = 2, self add up\n```\n\nWould be ambiguous between calling add on self with no arguments, then calling up on the result, and calling add on self with a parameter up. There is no way to fix this without making the parentheses required, or making the grammar context sensitive (i.e. checking to see if each message is a variable in the current context before deciding how to treat it.\n\nAs @rurban says, this could be special cased (just for the to method on Number), but this would only work on literals.\n\n```\nn = 3, m = 5, n to m (i): i string print.\n```\n\ncould not be special cased in this way, as we currently can't decide if n is a number.\n\nIt would also prevent the use of `to` being used in a different manner for another object.","files":null}]}